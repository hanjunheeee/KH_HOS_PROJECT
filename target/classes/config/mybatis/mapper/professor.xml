<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="pro">

	<!-- p(의료진)와 d(진료과) 테이블 조인 후 전체 조회 -->
	<select id="professor_department_join"
		resultType="vo.ProfessorListVO">
		SELECT *
		FROM (
		SELECT RANK() OVER (ORDER BY p.pro_idx DESC) AS rn,
		p.pro_file AS pro_file,
		p.pro_name AS pro_name,
		d.dept_name AS dept_name,
		p.pro_field AS pro_field
		FROM professor p
		JOIN department d ON p.dept_idx = d.dept_idx
		)
	</select>

	<!-- 교수 목록 검색 및 페이징 -->
	<select id="professor_search_page"
		resultType="vo.ProfessorListVO" parameterType="java.util.Map">
		SELECT *
		FROM (
		SELECT RANK() OVER (ORDER BY p.pro_idx DESC) AS rn,
		p.pro_file AS proFile,
		p.pro_name AS proName,
		d.dept_name AS deptName,
		p.pro_field AS proField
		FROM professor p
		JOIN department d ON p.dept_idx = d.dept_idx
		)
	</select>

	<!-- 총 데이터 개수 조회 -->
	<select id="getRowTotal" resultType="int"
		parameterType="java.util.Map">
		SELECT COUNT(*)
		FROM professor p
		JOIN department d
		ON p.dept_idx =
		d.dept_idx
		<!-- 검색 조건 추가 -->
		<trim prefix="where" prefixOverrides="or|and">
			<if
				test="name != null and department == null and field == null and name_department_field == null">
				AND p.pro_name LIKE '%' || #{pro_name} || '%'
			</if>
			<if
				test="name == null and department != null and field == null and name_department_field == null">
				AND d.dept_name LIKE '%' || #{dept_name} || '%'
			</if>
			<if
				test="name == null and department == null and field != null and name_department_field == null">
				AND p.pro_field LIKE '%' || #{pro_field} || '%'
			</if>
			<if
				test="name == null and department == null and field == null and name_department_field != null">
				AND (
				p.pro_name LIKE '%' || #{pro_name} || '%'
				OR d.dept_name
				LIKE '%' || #{dept_name} || '%'
				OR p.pro_field LIKE '%' ||
				#{pro_field} || '%'
				)
			</if>
		</trim>
	</select>

	<!-- 특정 부서의 교수 목록 조회 -->
	<select id="professor_list" resultType="pro"
		parameterType="String">
		select p.*
		from professor p
		join department d
		on p.dept_idx
		= d.dept_idx
		where d.dept_name = #{name}
	</select>

	<!-- 특정 교수 조회 -->
	<select id="select_professor" resultType="pro"
		parameterType="int">
		select * from professor where pro_idx= #{pro_idx}
	</select>

	<!-- 전체 교수 목록 조회 -->
	<select id="professor_list_2" resultType="vo.ProfessorVO">
		SELECT * FROM professor
	</select>

	<!-- 전체 교수 목록 테이블 조회 -->    <!-- 지금 현재 이걸 사용함!! 유효!! -->
	<select id="professor_list_table"
		resultType="vo.ProfessorListVO" parameterType="java.util.Map">
		SELECT *
		FROM (
		SELECT RANK() OVER (ORDER BY p.pro_idx DESC) AS rn,
		p.pro_idx,
		p.pro_file AS pro_file,
		p.pro_name AS pro_name,
		d.dept_name AS dept_name,
		p.pro_field AS pro_field
		FROM professor p
		JOIN department d ON p.dept_idx = d.dept_idx
		<trim prefix="where" prefixOverrides="or|and">
			<if test="pro_name != null">
				p.pro_name LIKE '%' || #{pro_name} || '%'
			</if>
			<if test="dept_name != null">
				or d.dept_name LIKE '%' || #{dept_name} || '%'
			</if>
			<if test="pro_field != null">
				or p.pro_field LIKE '%' || #{pro_field} || '%'
			</if>
		</trim>
		)
		WHERE rn BETWEEN #{start} AND #{end}
	</select>

	<!-- 전체 게시글 수 -->
	<select id="professor_count" resultType="int"
		parameterType="java.util.Map">
		SELECT COUNT(*)
		FROM professor p
		JOIN department d ON p.dept_idx = d.dept_idx
		<trim prefix="where" prefixOverrides="or|and">
			<if test="pro_name != null">
				p.pro_name LIKE '%' || #{pro_name} || '%'
			</if>
			<if test="dept_name != null">
				or d.dept_name LIKE '%' || #{dept_name} || '%'
			</if>
			<if test="pro_field != null">
				or p.pro_field LIKE '%' || #{pro_field} || '%'
			</if>
		</trim>
	</select>

	<!-- 의료진 상세 조회. 즉 검색 기능. 매퍼. 쿼리문 작성 -->
	<select id="professor_search_table"
		resultType="vo.ProfessorListVO" parameterType="java.util.Map">
		SELECT *
		FROM (
		SELECT RANK() OVER (ORDER BY p.pro_idx DESC) AS rn,
		p.pro_file AS pro_file,
		p.pro_name AS pro_name,
		d.dept_name AS dept_name,
		p.pro_field AS pro_field
		FROM professor p
		JOIN department d ON p.dept_idx = d.dept_idx
		<if
			test="pro_name != null or dept_name != null or pro_field != null">
			<trim prefix="where" prefixOverrides="or|and">
				<if
					test="pro_name != null and dept_name = null and pro_field = null">
					AND p.pro_name LIKE '%' || #{pro_name} || '%'
				</if>
				<if
					test="pro_name = null and dept_name != null and pro_field = null">
					AND d.dept_name LIKE '%' || #{dept_name} || '%'
				</if>
				<if
					test="pro_name = null and dept_name = null and pro_field != null">
					AND p.pro_field LIKE '%' || #{pro_field} || '%'
				</if>
				<if
					test="pro_name != null and dept_name != null and pro_field != null">
					AND (p.pro_name LIKE '%' || #{pro_name} || '%'
					OR d.dept_name LIKE '%' || #{dept_name} || '%'
					OR p.pro_field LIKE '%' || #{pro_field} || '%')
				</if>
			</trim>
		</if>
		)
		WHERE rn BETWEEN #{start} AND #{end}
	</select>

	<!-- 검색 기능 -->
	<select id="searchProfessor" parameterType="map"
		resultType="vo.ProfessorVO">
		SELECT * FROM (
		SELECT
		p.pro_idx AS proIdx,
		p.pro_name AS proName,
		p.pro_field AS proField,
		p.pro_file AS proFile,
		d.dept_name AS deptName,
		ROW_NUMBER() OVER (ORDER BY p.pro_name) AS rn
		FROM professor p
		JOIN
		department d ON p.dept_idx = d.dept_idx
		WHERE 1=1
		<if
			test="searchType == 'name' and keyword != null and keyword != ''">
			AND p.pro_name LIKE '%' || #{keyword} || '%'
		</if>
		<if
			test="searchType == 'department' and keyword != null and keyword != ''">
			AND d.dept_name LIKE '%' || #{keyword} || '%'
		</if>
		<if
			test="searchType == 'field' and keyword != null and keyword != ''">
			AND p.pro_field LIKE '%' || #{keyword} || '%'
		</if>
		<if
			test="searchType == 'all' and keyword != null and keyword != ''">
			AND (p.pro_name LIKE '%' || #{keyword} || '%'
			OR d.dept_name LIKE
			'%' || #{keyword} || '%'
			OR p.pro_field LIKE '%' || #{keyword} || '%')
		</if>
		) WHERE rn BETWEEN #{start} AND #{end}
	</select>
	
	<!-- 관리자:진료과 목록 -->
	<select id="department_list" resultType="vo.DepartmentVO">
		SELECT * FROM department
	</select>
	
	<!-- 관리자:의료진 추가 -->
	<insert id="professor_insert" parameterType="vo.ProfessorVO">
		INSERT INTO professor VALUES (
			seq_professor_idx.nextVal, #{dept_idx}, #{pro_name}, #{pro_field}, #{pro_file}
		)		
	</insert>
	
	<!-- 관리자:의료진 이름으로 vo 조회 -->
	<select id="professor_nameView" resultType="vo.ProfessorVO" parameterType="String">
		SELECT * FROM professor
		WHERE pro_name = #{pro_name}
	</select>
	
	<!-- 관리자:의료진 삭제 -->
	<delete id="professor_delete" parameterType="int">
		DELETE FROM professor
		WHERE pro_idx = #{pro_idx}
	</delete>
</mapper>



